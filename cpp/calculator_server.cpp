// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "calculator.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::com::rana::math;

#include <iostream>
using namespace std;

class calculatorHandler : virtual public calculatorIf {
 public:
  calculatorHandler() {
    // Your initialization goes here
  }

  int32_t add(const int32_t a, const int32_t b) {
    // Your implementation goes here
    printf("add\n");
    return a+b;
  }

  int32_t sub(const int32_t a, const int32_t b) {
    // Your implementation goes here
    printf("sub\n");
    return a-b;
  }

  int32_t mult(const int32_t a, const int32_t b) {
    // Your implementation goes here
    printf("mult\n");
    return a*b;
  }

  int32_t div(const int32_t a, const int32_t b) {
    // Your implementation goes here
    printf("div\n");
    return a/b;
  }

  void display(const std::string& text) {
    // Your implementation goes here
//    printf("display\n");
    cout << "Display: " << text << endl;
  }

  void getStudent(student& _return, const int32_t id) {
    // Your implementation goes here
    printf("getStudent\n");
    _return.id = id;
  }

  void printText(const std::string& text) {
    // Your implementation goes here
//    printf("printText\n");
    cout << "Printing...." << text << endl;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<calculatorHandler> handler(new calculatorHandler());
  shared_ptr<TProcessor> processor(new calculatorProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

